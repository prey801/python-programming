import os
import time
import win32evtlogutil
import win32con
import getpass
import tempfile

APP_NAME = "HarmlessMalwareSim"
EVENT_ID = 1337  # Custom ID

def log_event(message, level=win32con.EVENTLOG_WARNING_TYPE):
    win32evtlogutil.ReportEvent(
        APP_NAME,
        EVENT_ID,
        eventType=level,
        strings=[message],
        data=b"SimulatedMalwareData"
    )
    print(f"[LOGGED TO EVENT VIEWER] {message}")

def simulate_file_scan():
    temp_dir = tempfile.gettempdir()
    suspicious_files = []

    print("[*] Scanning for 'sensitive' files...")
    for root, dirs, files in os.walk("C:\\Users", topdown=True):
        for name in files:
            if name.lower() in ["passwords.txt", "secrets.docx", "credentials.xlsx"]:
                suspicious_files.append(os.path.join(root, name))
                time.sleep(0.1)

            if len(suspicious_files) > 3:
                break
        if len(suspicious_files) > 3:
            break

    msg = f"Simulated scan found {len(suspicious_files)} suspicious files."
    log_event(msg)

def simulate_user_data_collection():
    username = getpass.getuser()
    msg = f"Simulated collection of user info: username = {username}"
    log_event(msg)

def simulate_failure():
    try:
        print("[*] Simulating crash...")
        _ = 1 / 0
    except ZeroDivisionError as e:
        log_event(f"{APP_NAME} crashed: {str(e)}", level=win32con.EVENTLOG_ERROR_TYPE)

if __name__ == "__main__":
    print("== Harmless Malware Simulation Started ==")
    log_event("Simulation started. Malware-like behavior emulation beginning.")

    simulate_user_data_collection()
    simulate_file_scan()
    simulate_failure()

    log_event("Simulation ended. Forensic analysis can now be performed.", level=win32con.EVENTLOG_INFORMATION_TYPE)
    print("== Simulation Complete. Check Event Viewer under 'Application' for logs. ==\n")
    print("[*] Done. Check Event Viewer for logged events.\n")
    print("[*] Note: This is a harmless simulation. No real malware is present.")